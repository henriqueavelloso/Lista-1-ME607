# -*- coding: utf-8 -*-
"""Questão9Lista1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125es5krYO8GdhfL_A6XVvQSfZjRMl-uB

# **Gráfico de sequência**
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

url = "https://raw.githubusercontent.com/ctruciosm/ctruciosm.github.io/master/datasets/BTCUSDT.csv"

btc = pd.read_csv(url)

btc = btc[['timestamp', 'close', 'volume']]
btc['timestamp'] = pd.to_datetime(btc['timestamp'])

# Plotar o gráfico
plt.figure(figsize=(10, 6))
plt.plot(btc['timestamp'], btc['close'], color='green')
plt.ylabel('Preço')
plt.xlabel('Tempo')
plt.show()

"""# **Sazonalidade Mensal**"""

btc.set_index('timestamp', inplace=True)

btc['month'] = btc.index.month
btc['year'] = btc.index.year
btc['day_of_week'] = btc.index.dayofweek

# Plotar o gráfico
plt.figure(figsize=(12, 6))
sns.lineplot(data=btc, x='month', y='close', hue='year', palette='tab10')
plt.xlabel('Mês')
plt.ylabel('Preço')
plt.legend(title='Ano', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(1, 13))
plt.show()

"""# **Sazonalidade Diária**"""

btc['day_of_month'] = btc.index.day

# Plotar o gráfico
plt.figure(figsize=(12, 6))
sns.lineplot(data=btc, x='day_of_month', y='close', hue='year', palette='tab10')
plt.xlabel('Dia')
plt.ylabel('Preço')
plt.legend(title='Ano', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(1, 32))
plt.show()

"""# **Gráfico de dispersão**"""

plt.figure(figsize=(10, 5))
plt.scatter(btc['close'], btc['volume'], alpha=0.5, color='black', s=10)
plt.title("Preço vs. Volume do Bitcoin")
plt.xlabel("Preço")
plt.ylabel("Volume")
plt.show()

"""# **Lag plots**"""

btc['quarter'] = btc['timestamp'].dt.quarter  # Cria a coluna 'quarter'
max_lag = 6

fig, axes = plt.subplots(2, 3, figsize=(15, 15))
axes = axes.flatten()

for i in range(max_lag):
    lag = i + 1
    btc[f'lag_{lag}'] = btc['close'].shift(lag)
    sns.scatterplot(
        data=btc, x=f'lag_{lag}', y='close',  # Usa btc em vez de temp_df
        hue='quarter',
        ax=axes[i]
    )
    axes[i].set_title(f'Lag {lag}')

plt.tight_layout()
plt.show()